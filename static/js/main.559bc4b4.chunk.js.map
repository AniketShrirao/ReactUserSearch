{"version":3,"sources":["components/card/card.components.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","user","id","alt","name","email","CardList","users","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","ok","json","this","filteredUsers","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAGaA,G,kBAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,KAAKC,GAArC,0BAAiEC,IAAG,eAAUL,EAAMG,KAAKC,MACjG,6BAAMJ,EAAMG,KAAKG,OACjB,4BAAKN,EAAMG,KAAKI,aCHXC,EAAW,SAACR,GACrB,OACA,qBAAKC,UAAY,YAAjB,SAEQD,EAAMS,MAAMC,KAAK,SAAAP,GAAI,OACjB,cAAC,EAAD,CAAoBA,KAAMA,GAAfA,EAAKC,UCNnBO,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,uBACIC,KAAK,SACLb,UAAU,SACVW,YAAcA,EACdG,SAAYF,MC6BTG,E,kDA/Bb,aAAe,IAAD,8BACZ,gBAOFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAPtC,EAAKC,MAAQ,CACXb,MAAO,GACPU,YAAc,IAJJ,E,gEAYO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAKA,EAASC,GAAMD,EAASE,OAAS,gBACnDH,MAAK,SAAAf,GAAK,OAAI,EAAKS,SAAU,CAACT,MAAQA,S,+BAG/B,IAAD,EACsBmB,KAAKN,MAA3Bb,EADA,EACAA,MAAOU,EADP,EACOA,YACRU,EAAgBpB,EAAMqB,QAAQ,SAAA3B,GAAI,OAAIA,EAAKG,KAAKyB,cAAcC,SAASb,EAAYY,kBACzF,OACE,sBAAK9B,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,CAAWW,YAAa,eAAeC,aAAgBe,KAAKf,eAC5D,cAAC,EAAD,CAAUJ,MAAOoB,W,GA3BPI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.559bc4b4.chunk.js","sourcesContent":["import React from 'react';\nimport './card.style.css';\n\nexport const Card = (props)=> (\n    <div className=\"card-container\">\n        <img src={`https://robohash.org/${props.user.id}?set=set5&size=180x180`} alt={`user-${props.user.id}`}/>\n        <h2 >{props.user.name}</h2>\n        <p >{props.user.email}</p>\n    </div>\n)","import React from 'react';\nimport './card-list.style.css';\nimport { Card } from '../card/card.components'\n\nexport const CardList = (props) => {\n    return (\n    <div className = \"card-list\">\n        {        \n            props.users.map( user => (\n                <Card key={user.id} user={user}/>\n            ))\n        }\n    </div>\n    )\n}","import React from 'react'\nimport './search-box.style.css'\n\nexport const SearchBox = ({placeholder, handleChange}) => {\n    return (\n        <input \n            type=\"search\"\n            className=\"search\" \n            placeholder= {placeholder}\n            onChange = {handleChange}\n        />\n    )    \n}","import './App.css';\nimport { Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      users: [],\n      searchField : ''\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value});\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => (response.ok) ? response.json() : 'Api Failed')\n    .then(users => this.setState( {users : users}));\n  }\n\n  render() {\n    const {users, searchField} = this.state;\n    const filteredUsers = users.filter( user => user.name.toLowerCase().includes(searchField.toLowerCase())); \n    return (\n      <div className=\"App\">\n        <h1>Users Database</h1>\n        <SearchBox placeholder =\"search Users\" handleChange = {this.handleChange}/>\n        <CardList users={filteredUsers}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}